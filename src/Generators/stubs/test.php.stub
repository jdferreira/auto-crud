<?php

namespace Tests;

use {{ modelNamespace }}\{{ modelClass }};
use Tests\TestCase;
use Illuminate\Support\Str;
use Ferreira\AutoCrud\AssertsHTML;
use Ferreira\AutoCrud\AssertsField;
use Illuminate\Foundation\Testing\RefreshDatabase;
{{ otherUses }}

class {{ modelClassPlural }}CrudTest extends TestCase
{
    use RefreshDatabase,
        AssertsHTML,
        AssertsField;

    public function setUp(): void
    {
        parent::setUp();

        $this->withoutExceptionHandling();
    }

    /** @test */
    public function it_shows_existing_{{ tablename }}_in_the_index()
    {
        {{ modelVariablePlural }} = {{ fullFactoryForTwo }}->create();

        foreach ({{ modelVariablePlural }} as {{ modelVariableSingular }}) {
            $this->get('/{{ tablename }}')
                {{ assertSeeColumnValuesOnIndexOrShow }};
        }
    }

    /** @test */
    public function it_shows_existing_{{ tablename }}_in_the_api_index()
    {
        {{ modelVariablePlural }} = {{ fullFactoryForTwo }}->create();

        foreach ({{ modelVariablePlural }} as {{ modelVariableSingular }}) {
            $this->get('/api/{{ tablename }}')
                ->assertJsonFragment({{ modelVariableSingular }}->toArray());
        }
    }

    /** @test */
    public function it_shows_the_values_of_{{ tablenameSingularWithArticle }}_in_the_show_view()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();

        $this->get({{ modelVariableSingular }}->path())
            {{ assertSeeColumnValuesOnIndexOrShow }};
    }

    /** @test */
    public function it_shows_the_values_of_{{ tablenameSingularWithArticle }}_in_the_api_show_view()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();

        $this->get('/api' . {{ modelVariableSingular }}->path())->assertExactJson({{ modelVariableSingular }}->toArray());
    }

    /** @test */
    public function it_asks_for_all_columns_on_the_{{ tablenameSingular }}_create_form()
    {
        $document = $this->getDOMDocument(
            $this->get('/{{ tablename }}/create')
        );

        {{ assertHTMLOnForm }}
    }

    /** @test */
    public function it_starts_the_{{ tablenameSingular }}_create_form_with_the_default_values()
    {
        {{ setTime }}

        $document = $this->getDOMDocument(
            $this->get('/{{ tablename }}/create')
        );

        {{ assertDefaultValuesOnCreateForm }}
    }

    /** @test */
    public function it_asks_for_all_columns_on_the_edit_form_of_{{ tablenameSingularWithArticle }}()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();

        $document = $this->getDOMDocument(
            $this->get({{ modelVariableSingular }}->path() . '/edit')
        );

        {{ assertHTMLOnForm }}
    }

    /** @test */
    public function it_starts_the_edit_form_with_the_{{ tablenameSingular }}_current_values()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();

        $document = $this->getDOMDocument(
            $this->get({{ modelVariableSingular }}->path() . '/edit')
        );

        {{ assertEditFormHasValues }}
    }

    /** @test */
    public function it_keeps_old_values_on_unsuccessful_updates_of_{{ tablename }}()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();
        $oldValue = {{ modelVariableSingular }}->{{ oneConstraintField }};

        $updated = {{ modelVariableSingular }}->toArray();
        $updated['{{ oneConstraintField }}'] = {{ oneInvalidValue }};

        $this->withExceptionHandling();

        $response = $this->put({{ modelVariableSingular }}->path(), $updated);

        $response->assertSessionHasInput('{{ oneConstraintField }}', {{ oneInvalidValue }});

        $this->assertEquals($oldValue, {{ modelVariableSingular }}->fresh()->{{ oneConstraintField }});
    }

    /** @test */
    public function it_keeps_old_values_on_unsuccessful_api_updates_of_{{ tablename }}()
    {
        {{ modelVariableSingular }} = {{ fullFactory }}->create();
        $oldValue = {{ modelVariableSingular }}->{{ oneConstraintField }};

        $updated = {{ modelVariableSingular }}->toArray();
        $updated['{{ oneConstraintField }}'] = {{ oneInvalidValue }};

        $this->withExceptionHandling();

        $this->put('/api' . {{ modelVariableSingular }}->path(), $updated);

        $this->assertEquals($oldValue, {{ modelVariableSingular }}->fresh()->{{ oneConstraintField }});
    }

    /** @test */
    public function it_populates_foreign_keys_on_the_create_and_edit_forms_of_{{ tablename }}()
    {
        {{ assertForeignFieldsPopulated }}
    }

    /** @test */
    public function it_populates_many_to_many_relationships_on_the_create_and_edit_forms_of_{{ tablename }}()
    {
        {{ assertManyToManyRelationships }}
    }

    /** @test */
    public function it_marks_required_labels_on_{{ tablename }}_create_and_edit_forms()
    {
        $document = $this->getDOMDocument($this->get('/{{ tablename }}/create'));

        {{ assertRequiredFields }}

        {{ modelVariableSingular }} = {{ simpleFactory }}->create();

        $document = $this->getDOMDocument($this->get({{ modelVariableSingular }}->path() . '/edit'));

        {{ assertRequiredFields }}
    }

    /** @test */
    public function it_validates_field_values_when_creating_{{ tablenameSingularWithArticle }}()
    {
        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->beginAssertFields('POST', '/{{ tablename }}', $new)->assertFields();
    }

    /** @test */
    public function it_validates_field_values_when_creating_{{ tablenameSingularWithArticle }}_with_api()
    {
        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->beginAssertFields('POST', '/api/{{ tablename }}', $new)->assertFields();
    }

    /** @test */
    public function it_creates_{{ tablename }}_when_asked_to()
    {
        $this->assertNull({{ modelClass }}::find(1));

        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->post('/{{ tablename }}', $new);

        $this->assertNotNull({{ modelVariableSingular }} = {{ modelClass }}::find(1));

        {{ assertNewEqualsModel }}
        {{ assertNewEqualsModelForManyToManyRelationships }}
    }

    /** @test */
    public function it_creates_{{ tablename }}_with_api_when_asked_to()
    {
        $this->assertNull({{ modelClass }}::find(1));

        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->post('/api/{{ tablename }}', $new);

        $this->assertNotNull({{ modelVariableSingular }} = {{ modelClass }}::find(1));

        {{ assertNewEqualsModel }}
        {{ assertNewEqualsModelForManyToManyRelationships }}
    }

    /** @test */
    public function it_validates_field_values_when_updating_{{ tablenameSingularWithArticle }}()
    {
        $new = {{ simpleFactory }}->raw();

        {{ modelVariableSingular }} = new {{ modelClass }}($new);
        {{ modelVariableSingular }}->save();

        {{ modelVariableStoreSomeManyToManyRelationships }}
        {{ updateNewWithManyToManyRelationships }}

        $this->beginAssertFields('PUT', {{ modelVariableSingular }}->path(), $new)->assertFields();
    }

    /** @test */
    public function it_validates_field_values_when_updating_{{ tablenameSingularWithArticle }}_with_api()
    {
        $new = {{ simpleFactory }}->raw();

        {{ modelVariableSingular }} = new {{ modelClass }}($new);
        {{ modelVariableSingular }}->save();

        {{ modelVariableStoreSomeManyToManyRelationships }}
        {{ updateNewWithManyToManyRelationships }}

        $this->beginAssertFields('PUT', '/api' . {{ modelVariableSingular }}->path(), $new)->assertFields();
    }

    /** @test */
    public function it_updates_{{ tablename }}_when_asked_to()
    {
        {{ modelVariableSingular }} = {{ simpleFactory }}->create();
        {{ modelVariableStoreSomeManyToManyRelationships }}

        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->put({{ modelVariableSingular }}->path(), $new);

        {{ modelVariableSingular }} = {{ modelVariableSingular }}->fresh();

        {{ assertNewEqualsModel }}
        {{ assertNewEqualsModelForManyToManyRelationships }}
    }

    /** @test */
    public function it_updates_{{ tablename }}_with_api_when_asked_to()
    {
        {{ modelVariableSingular }} = {{ simpleFactory }}->create();
        {{ modelVariableStoreSomeManyToManyRelationships }}

        $new = {{ simpleFactory }}->raw();
        {{ updateNewWithManyToManyRelationships }}

        $this->put('/api' . {{ modelVariableSingular }}->path(), $new);

        {{ modelVariableSingular }} = {{ modelVariableSingular }}->fresh();

        {{ assertNewEqualsModel }}
        {{ assertNewEqualsModelForManyToManyRelationships }}
    }

    /** @test */
    public function it_deletes_{{ tablename }}_when_asked_to()
    {
        {{ modelVariableSingular }} = {{ simpleFactory }}->create();

        $this->delete({{ modelVariableSingular }}->path());

        $this->assertNull({{ modelClass }}::find({{ modelVariableSingular }}->id));
    }

    /** @test */
    public function it_deletes_{{ tablename }}_with_api_when_asked_to()
    {
        {{ modelVariableSingular }} = {{ simpleFactory }}->create();

        $this->delete('/api' . {{ modelVariableSingular }}->path());

        $this->assertNull({{ modelClass }}::find({{ modelVariableSingular }}->id));
    }

    public function assertFields()
    {
        $this->withExceptionHandling();

        {{ assertFields }}
        {{ assertManyToManyFields }}
    }
}
