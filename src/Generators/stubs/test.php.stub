<?php

namespace Tests;

use {{ modelNamespace }}\{{ modelClass }};
{{ useOtherModels }}
use Tests\TestCase;
use Illuminate\Support\Str;
use Ferreira\AutoCrud\AssertsHTML;
use Ferreira\AutoCrud\AssertsField;
use Illuminate\Foundation\Testing\RefreshDatabase;

class {{ modelClassPlural }}CrudTest extends TestCase
{
    use RefreshDatabase,
        AssertsHTML,
        AssertsField;

    public function setUp(): void
    {
        parent::setUp();

        $this->withoutExceptionHandling();
    }

    /** @test */
    public function it_shows_existing_{{ tablename }}_in_the_index()
    {
        ${{ modelVariablePlural }} = factory({{ modelClass }}::class, 2)->states('full_model')->create();

        foreach (${{ modelVariablePlural }} as ${{ modelVariableSingular }}) {
            $this->get('/{{ tablename }}')
                {{ assertSeeColumnValuesOnIndexOrShow }};
        }
    }

    /** @test */
    public function it_shows_the_values_of_{{ tablenameSingularWithArticle }}_in_the_show_view()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->states('full_model')->create();

        $this->get(${{ modelVariableSingular }}->path())
            {{ assertSeeColumnValuesOnIndexOrShow }};
    }

    /** @test */
    public function it_asks_for_all_columns_on_the_{{ tablenameSingular }}_create_form()
    {
        $document = $this->getDOMDocument(
            $this->get('/{{ tablename }}/create')
        );

        {{ assertHTMLOnForm }}
    }

    /** @test */
    public function it_starts_the_{{ tablenameSingular }}_create_form_with_the_default_values()
    {
        $document = $this->getDOMDocument(
            $this->get('/{{ tablename }}/create')
        );

        {{ assertDefaultValuesOnCreateForm }}
    }

    /** @test */
    public function it_asks_for_all_columns_on_the_edit_form_of_{{ tablenameSingularWithArticle }}()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->states('full_model')->create();

        $document = $this->getDOMDocument(
            $this->get(${{ modelVariableSingular }}->path() . '/edit')
        );

        {{ assertHTMLOnForm }}
    }

    /** @test */
    public function it_starts_the_edit_form_with_the_{{ tablenameSingular }}_current_values()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->states('full_model')->create();

        $document = $this->getDOMDocument(
            $this->get(${{ modelVariableSingular }}->path() . '/edit')
        );

        {{ assertEditFormHasValues }}
    }

    /** @test */
    public function it_keeps_old_values_on_unsuccessful_{{ tablenameSingular }}_update()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->states('full_model')->create();

        $updated = ${{ modelVariableSingular }}->toArray();
        $updated['{{ oneConstraintField }}'] = {{ oneInvalidValue }};

        $this->withExceptionHandling();

        $response = $this->put(${{ modelVariableSingular }}->path(), $updated);

        $response->assertSessionHasInput('{{ oneConstraintField }}', {{ oneInvalidValue }});
    }

    /** @test */
    public function it_marks_required_labels_on_{{ tablename }}_create_and_edit_forms()
    {
        $document = $this->getDOMDocument($this->get('/{{ tablename }}/create'));

        {{ assertRequiredFields }}

        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->create();

        $document = $this->getDOMDocument($this->get(${{ modelVariableSingular }}->path() . '/edit'));

        {{ assertRequiredFields }}
    }

    /** @test */
    public function it_validates_field_values_when_creating_{{ tablenameSingularWithArticle }}()
    {
        $data = factory({{ modelClass }}::class)->raw();

        $this->beginAssertFields('POST', '/{{ tablename }}', $data)->assertFields();
    }

    /** @test */
    public function it_creates_{{ tablename }}_when_asked_to()
    {
        $this->assertNull({{ modelClass }}::find(1));

        $new = factory({{ modelClass }}::class)->raw();

        $this->post('/{{ tablename }}', $new);

        $this->assertNotNull(${{ modelVariableSingular }} = {{ modelClass }}::find(1));

        {{ assertNewEqualsModel }}
    }

    /** @test */
    public function it_validates_field_values_when_updating_{{ tablenameSingularWithArticle }}()
    {
        $new = factory({{ modelClass }}::class)->raw();

        ${{ modelVariableSingular }} = new {{ modelClass }}($new);
        ${{ modelVariableSingular }}->save();

        $this->beginAssertFields('PUT', ${{ modelVariableSingular }}->path(), $new)->assertFields();
    }

    /** @test */
    public function it_updates_{{ tablename }}_when_asked_to()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->create();

        $new = factory({{ modelClass }}::class)->raw();

        $this->put(${{ modelVariableSingular }}->path(), $new);

        ${{ modelVariableSingular }} = ${{ modelVariableSingular }}->fresh();

        {{ assertNewEqualsModel }}
    }

    /** @test */
    public function it_deletes_{{ tablename }}_when_asked_to()
    {
        ${{ modelVariableSingular }} = factory({{ modelClass }}::class)->create();

        $this->delete(${{ modelVariableSingular }}->path());

        $this->assertNull({{ modelClass }}::find(${{ modelVariableSingular }}->id));
    }

    public function assertFields()
    {
        $this->withExceptionHandling();

        {{ assertFields }}
    }
}
