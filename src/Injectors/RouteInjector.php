<?php

namespace Ferreira\AutoCrud\Injectors;

use Ferreira\AutoCrud\Word;
use Illuminate\Filesystem\Filesystem;
use Ferreira\AutoCrud\Database\DatabaseInformation;

class RouteInjector
{
    /**
     * @var DatabaseInformation
     */
    private $db;

    /**
     * @var string[]
     */
    private $tables;

    /**
     * @var Filesystem
     */
    private $files;

    /**
     * @var bool
     */
    private $api;

    private $comment;

    /**
     * Construct an injector to add route calls to the web and api route files.
     *
     * @param string[] $tables
     */
    public function __construct(array $tables, bool $api)
    {
        $this->db = app(DatabaseInformation::class);
        $this->files = app(Filesystem::class);

        $this->comment = [
            '',
            '// The following routes were generated by the autocrud:route command',
        ];

        $this->tables = $tables;
        $this->api = $api;
    }

    public function inject()
    {
        $this->ensureFileExists(
            $filename = base_path('routes/web.php'),
            __DIR__ . '/stubs/start-tag.php'
        );

        $this->files->put(
            $filename,
            $this->injectWebInto($this->files->get($filename))
        );

        if ($this->api) {
            $this->ensureFileExists(
                $filename = base_path('routes/api.php'),
                __DIR__ . '/stubs/start-tag.php'
            );

            $this->files->put(
                $filename,
                $this->injectApiInto($this->files->get($filename))
            );
        }
    }

    private function injectWebInto(string $code): string
    {
        $routes = $this->generateWebRoutes();

        return $code . implode("\n", array_merge(
            $this->comment,
            $routes
        ));
    }

    private function injectApiInto(string $code): string
    {
        $routes = $this->generateApiRoutes();

        return $code . implode("\n", array_merge(
            $this->comment,
            $routes
        ));
    }

    private function generateWebRoutes(): array
    {
        $lines = [];

        foreach ($this->tables as $table) {
            $controller = Word::class($table) . 'Controller';
            $lines[] = "Route::resource('/$table', '$controller');";
        }

        return $lines;
    }

    private function generateApiRoutes(): array
    {
        $lines = ['Route::group([\'namespace\' => \'\App\Http\ApiControllers\'], function () {'];

        foreach ($this->tables as $table) {
            $controller = Word::class($table) . 'Controller';
            $lines[] = "    Route::apiResource('/$table', '$controller');";
        }

        $lines[] = '});';

        return $lines;
    }

    private function ensureFileExists($filename, $copyFrom)
    {
        $dir = $this->files->dirname($filename);

        if (! $this->files->exists($dir)) {
            $this->files->makeDirectory($dir, 0755, true);
        }

        if (! $this->files->exists($filename)) {
            $this->files->put($filename, $this->files->get($copyFrom));
        }
    }
}
